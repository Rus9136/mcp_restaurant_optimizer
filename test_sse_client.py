#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è SSE endpoint
"""
import asyncio
import json
from datetime import datetime
from typing import Dict, Any

import httpx
from loguru import logger


class SSEClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SSE –ø–æ—Ç–æ–∫—É
    """
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.sse_url = f"{base_url}/api/v1/mcp/sse"
        self.is_connected = False
        self.event_handlers = {}
        
    def add_event_handler(self, event_type: str, handler):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏–π
        """
        self.event_handlers[event_type] = handler
        
    async def connect(self, department_id: str = None, interval: int = 5):
        """
        –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ SSE –ø–æ—Ç–æ–∫—É
        """
        params = {"interval": interval}
        if department_id:
            params["department_id"] = department_id
            
        try:
            async with httpx.AsyncClient() as client:
                logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SSE: {self.sse_url}")
                
                async with client.stream("GET", self.sse_url, params=params) as response:
                    if response.status_code != 200:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}")
                        return
                    
                    logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ SSE –ø–æ—Ç–æ–∫—É")
                    self.is_connected = True
                    
                    async for line in response.aiter_lines():
                        if line.startswith("data: "):
                            try:
                                data = json.loads(line[6:])  # –£–±–∏—Ä–∞–µ–º "data: "
                                await self._handle_event(data)
                            except json.JSONDecodeError as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
                                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        finally:
            self.is_connected = False
            logger.info("SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
    
    async def _handle_event(self, data: Dict[str, Any]):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        """
        event_type = data.get("type")
        timestamp = data.get("timestamp")
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event_type} –≤ {timestamp}")
        
        # –í—ã–∑—ã–≤–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if event_type in self.event_handlers:
            try:
                await self.event_handlers[event_type](data)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ {event_type}: {e}")
        else:
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            await self._default_handler(data)
    
    async def _default_handler(self, data: Dict[str, Any]):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
        """
        event_type = data.get("type", "unknown")
        event_data = data.get("data", {})
        
        print(f"\n{'='*50}")
        print(f"–°–æ–±—ã—Ç–∏–µ: {event_type.upper()}")
        print(f"–í—Ä–µ–º—è: {data.get('timestamp')}")
        print(f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {data.get('department_id')}")
        print(f"–î–∞–Ω–Ω—ã–µ:")
        
        if event_type == "sales":
            print(f"  üí∞ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {event_data.get('total_sales', 0):,.2f} —Ä—É–±")
            print(f"  üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {event_data.get('total_transactions', 0)}")
            print(f"  üí≥ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {event_data.get('average_check', 0):,.2f} —Ä—É–±")
            
            if "top_dishes" in event_data:
                print("  üçΩÔ∏è –¢–æ–ø –±–ª—é–¥:")
                for dish in event_data["top_dishes"]:
                    print(f"    - {dish['name']}: {dish['count']} —à—Ç")
                    
        elif event_type == "bookings":
            print(f"  üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {event_data.get('total_bookings_today', 0)}")
            print(f"  ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {event_data.get('confirmed_bookings', 0)}")
            print(f"  ‚è≥ –û–∂–∏–¥–∞–µ—Ç: {event_data.get('pending_bookings', 0)}")
            print(f"  ‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {event_data.get('cancelled_bookings', 0)}")
            print(f"  üë• –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã: {event_data.get('average_party_size', 0)}")
            
        elif event_type == "occupancy":
            print(f"  üè¢ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ª–∞: {event_data.get('current_occupancy_percent', 0)}%")
            print(f"  ü™ë –ó–∞–Ω—è—Ç–æ —Å—Ç–æ–ª–æ–≤: {event_data.get('occupied_tables', 0)}/{event_data.get('total_tables', 0)}")
            print(f"  ‚è∞ –û—á–µ—Ä–µ–¥—å: {event_data.get('waiting_queue', 0)} —á–µ–ª–æ–≤–µ–∫")
            
        elif event_type == "shifts":
            print(f"  üë®‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {event_data.get('total_staff_today', 0)}")
            print(f"  üîÑ –°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç: {event_data.get('currently_working', 0)}")
            print(f"  ‚òï –ù–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ: {event_data.get('on_break', 0)}")
            
            if "departments" in event_data:
                print("  üè¢ –ü–æ –æ—Ç–¥–µ–ª–∞–º:")
                for dept, info in event_data["departments"].items():
                    print(f"    - {dept}: {info['working']}/{info['planned']}")
                    
        elif event_type == "connection":
            print(f"  üîó {event_data.get('message', '–ü–æ–¥–∫–ª—é—á–µ–Ω')}")
            
        elif event_type == "error":
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {event_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
        print(f"{'='*50}\n")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã SSE –∫–ª–∏–µ–Ω—Ç–∞
    """
    client = SSEClient("http://localhost:8003")  # –ò–ª–∏ –≤–∞—à –¥–æ–º–µ–Ω
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–¥–∞–∂
    async def sales_handler(data):
        sales_data = data.get("data", {})
        total_sales = sales_data.get("total_sales", 0)
        
        if total_sales > 100000:
            logger.warning(f"üö® –í—ã—Å–æ–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {total_sales:,.2f} —Ä—É–±!")
        
        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –∏ —Ç.–¥.
        print(f"üìà –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–∞–∂: {total_sales:,.2f} —Ä—É–±")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –∑–∞–≥—Ä—É–∑–∫–∏
    async def occupancy_handler(data):
        occupancy_data = data.get("data", {})
        occupancy_percent = occupancy_data.get("current_occupancy_percent", 0)
        
        if occupancy_percent > 90:
            logger.warning(f"üö® –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ª–∞: {occupancy_percent}%!")
        elif occupancy_percent < 30:
            logger.info(f"üìâ –ù–∏–∑–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ª–∞: {occupancy_percent}%")
        
        print(f"üè¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏: {occupancy_percent}%")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    client.add_event_handler("sales", sales_handler)
    client.add_event_handler("occupancy", occupancy_handler)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SSE –ø–æ—Ç–æ–∫—É
        await client.connect(
            department_id="4cb558ca-a8bc-4b81-871e-043f65218c50",
            interval=3  # –ò–Ω—Ç–µ—Ä–≤–∞–ª 3 —Å–µ–∫—É–Ω–¥—ã
        )
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è...")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.add(
        "sse_client.log",
        rotation="10 MB",
        retention="7 days",
        format="{time} | {level} | {message}"
    )
    
    print("SSE Test Client")
    print("===============")
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SSE –ø–æ—Ç–æ–∫—É...")
    print("–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    asyncio.run(main())